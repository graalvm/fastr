#
# Copyright (c) 2015, 2019, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 3 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 3 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

# This extracts, configures and builds GnuR for the current platform.
# FastR does not, obviously, need all of GnuR to be built; only those pieces
# that it shares, but is simpler and safer to just build all of it. The relevant 
# pieces are then copied to other FastR directories.
#
# Portions of the Makeconf file are then extracted to use in building the native
# parts of FastR, especially packages with native code.

.PHONY: all config config_update build clean

OSNAME := $(shell uname)

PATCH := patch
PATCH_BUILD := patch-build

ifeq ($(OSNAME), Linux)
  FORCE_PIC := true
else ifeq ($(OSNAME), Darwin)
else
	$(error OS $(OSNAME) is not supported)
endif

ifdef BUILD_GNUR
all: Makefile $(GNUR_HOME_BINARY_UNPACKED)/gnur.done $(PATCH_BUILD) config $(PATCH_BUILD)/include
else
all: Makefile $(GNUR_HOME_BINARY_UNPACKED)/gnur.done $(PATCH_BUILD) config_update
endif

# GNUR_CONFIG_FLAGS must be set using possible overrides of the locations of required packages

ifneq ($(PKG_INCLUDE_FLAGS_OVERRIDE),)
    GNUR_CONFIG_FLAGS := CFLAGS="$(CFLAGS) $(PKG_INCLUDE_FLAGS_OVERRIDE)" \
                         CPPFLAGS="$(CPPFLAGS) $(PKG_INCLUDE_FLAGS_OVERRIDE)" \
                         CXXFLAGS="$(CXXFLAGS) $(PKG_INCLUDE_FLAGS_OVERRIDE)"
endif

ifneq ($(PKG_LDFLAGS_OVERRIDE),)
        GNUR_CONFIG_FLAGS := $(GNUR_CONFIG_FLAGS) LDFLAGS="$(PKG_LDFLAGS_OVERRIDE)"
endif

# setup for LLVM (if enabled)
GNUR_CONFIG_FLAGS := $(GNUR_CONFIG_FLAGS) FFLAGS=-O2 $(FASTR_COMPILERS)

config: $(PATCH_BUILD)/Makefile config_update

# Updates the Makeconf file to contain -fpic flags if necessary.
# This is the toplevel Makeconf file used to build GNU-R itself
# and in FastR case the "patch-build" directory.
ifeq ($(FORCE_PIC), true)
config_update: Makeconf.done

Makeconf.done: edMakeconf
ifndef BUILD_GNUR
	# copy Makeconf from GNUR_HOME_BINARY - since this is binary distribution, it does not contain the
	# Makeconf used to build the sources. We take the Makeconf from "etc" and hope that it works too.
	cp $(GNUR_HOME_BINARY)/etc/Makeconf $(PATCH_BUILD)
endif
	# we already have Makeconf in "patch-build" if building GNU-R from sources?
	ed $(PATCH_BUILD)/Makeconf < edMakeconf
	touch Makeconf.done

else # FORCE_PIC is false

config_update:
ifndef BUILD_GNUR
	#copy Makeconf from GNUR_HOME_BINARY, see the comment next to the Makeconf.done target
	cp $(GNUR_HOME_BINARY)/etc/Makeconf $(PATCH_BUILD)
endif

endif
# end FORCE_PIC


ifndef FASTR_RELEASE
RECPKGS := "--without-recommended-packages"
endif

GNUR_HOME_BINARY_UNPACKED_PARENT := $(dir $(GNUR_HOME_BINARY_UNPACKED))

ifdef BUILD_GNUR
$(GNUR_HOME_BINARY_UNPACKED)/gnur.done:
	echo Installing R-$(R_VERSION) into $(GNUR_HOME_BINARY_UNPACKED)
	rm -rf "$(GNUR_HOME_BINARY_UNPACKED)"
	mkdir -p "$(GNUR_HOME_BINARY_UNPACKED_PARENT)"
	(cd "$(GNUR_HOME_BINARY_UNPACKED_PARENT)"; tar xf R-$(R_VERSION).tar.gz)
	(cd "$(GNUR_HOME_BINARY_UNPACKED)"; ./configure --with-x=no --with-aqua=no $(RECPKGS) --enable-memory-profiling $(GNUR_CONFIG_FLAGS) > gnur_configure.log 2>&1; "$(MAKE)" -j > gnur_make.log 2>&1)
	touch "$(GNUR_HOME_BINARY_UNPACKED)/gnur.done"
else
$(GNUR_HOME_BINARY_UNPACKED)/gnur.done:
	echo Unpacking R-$(R_VERSION) into $(GNUR_HOME_BINARY_UNPACKED)
	rm -rf "$(GNUR_HOME_BINARY_UNPACKED)"
	mkdir -p "$(GNUR_HOME_BINARY_UNPACKED_PARENT)"
	(cd "$(GNUR_HOME_BINARY_UNPACKED_PARENT)"; tar xf R-$(R_VERSION).tar.gz)
	touch "$(GNUR_HOME_BINARY_UNPACKED)/gnur.done"
endif

IN_FILES := $(patsubst %.in,%,$(abspath $(shell find $(PATCH) -name '*.in')))
IN_FILES_PREFIX := $(abspath $(PATCH))
$(info IN_FILES_PREFIX : $(IN_FILES_PREFIX))
IN_FILES_PREFIX_LEN := $(shell echo $(IN_FILES_PREFIX) | wc -c)
$(info IN_FILES_PREFIX_LEN : $(IN_FILES_PREFIX_LEN))

$(PATCH_BUILD):
	(cp -R $(PATCH) $(PATCH_BUILD))
	
# Copy/link configured files from the original GNUR to patch-build
# We will override most of those in com.oracle.truffle.r.native/run/Makefile
$(PATCH_BUILD)/Makefile:
	ln -s $(GNUR_HOME_BINARY_UNPACKED)/tools $(PATCH_BUILD)/tools
	ln -s $(GNUR_HOME_BINARY_UNPACKED)/etc $(PATCH_BUILD)/etc
	ln -s $(GNUR_HOME_BINARY_UNPACKED)/share $(PATCH_BUILD)/share 
	ln -s $(GNUR_HOME_BINARY_UNPACKED)/doc $(PATCH_BUILD)/doc
	ln -s $(GNUR_HOME_BINARY_UNPACKED)/config.status $(PATCH_BUILD)/config.status
	ln -s $(GNUR_HOME_BINARY_UNPACKED)/config.log $(PATCH_BUILD)/config.log
	for target in $(IN_FILES); do \
		f=`echo $$target | cut -c $(IN_FILES_PREFIX_LEN)-`; \
		cp $(GNUR_HOME_BINARY)$$f $(PATCH_BUILD)$$f; \
	done

$(PATCH_BUILD)/include:
	$(MAKE) -C $(PATCH_BUILD)/src/include

clean: cleanpatchbuild
	rm -f Makeconf.done
	rm -f $(GNUR_HOME_BINARY_UNPACKED)/gnur.done

cleanpatchbuild:
	rm -rf $(PATCH_BUILD)
